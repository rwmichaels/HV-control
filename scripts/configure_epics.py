#!/usr/bin/env python3

# Script to configure EPICS to correspond to the installed slots in the Lecroy Crate.

#1.  Find the hostname (presumably rpiNN). Use the digits at the end of the host name
#    to determine a (hopefully) unique crate ID.
#2.  Use /tmp/LecroySlotList.txt, which is written when the shim starts
#    to determine which slots are occupied in the mainframe
#3.  Use the crate ID and slot list to make an EPICS substituion file to define all the EPICS records
#4.  Start the lecroy EPICS application using crate ID and signals defined for this crate

import socket
import re
import datetime
import sys

DEFAULTCRATE=1
SLOTLISTFILE="/tmp/LecroySlotList.txt"
#SLOTLISTFILE="/home/pi/LecroySlotList17.txt"
EPICSAPPROOT="/home/pi/epics/lecroy-epics/apps"
STDIR= "%s/iocBoot/iocrpi"%EPICSAPPROOT
DBDIR= "%s/db"%EPICSAPPROOT
SUBFILENAME="%s/LecroyHV.substitutions"%DBDIR
CRNAMEPREFIX="HAHV"
CHANS=12                        
# Need to make channel count slot type dependent if we have more
# than 1461 modules

command_codes = {
    "pwonoff": 0x01,
    "v0set": 0x02,
    "i0set": 0x05,
    "rampup": 0x04,
    "rampdn": 0x03,
    "vmondz": 0x06,
    "imondz": 0x07
}
alarm_limits = {
    "lolo": -50,
    "low": -25,
    "high": 25,
    "hihi": 50
}

def get_ip():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        # doesn't even have to be reachable
        s.connect(('10.255.255.255', 1))
        IP = s.getsockname()[0]
    except Exception:
        IP = '127.0.0.1'
    finally:
        s.close()
    return IP

my_address = get_ip()

domain_name = socket.gethostbyaddr(my_address)[0]

print(domain_name.split(".",1)[0])

m=re.match('.*\D([\d]+)$', domain_name.split(".",1)[0])

cratenum=DEFAULTCRATE
if m:
    cratenum = int(m.group(1))

print("Crate number =",cratenum)

slotlist=[]
with open(SLOTLISTFILE,"r") as f:
    for line in f:
        m=re.match('^(\d+)\s+(\S+)\s+',line)
        if m:
            slot = int(m.group(1))
            modtype = m.group(2)
            if modtype=="1461N" or modtype == "1461P":
                slotlist.append(slot)
                nchannels = 12
            else:
                print("Unknown module type",m.group(2),"in slot",slot)
                       
print(slotlist)        

hvaddcrate=open(STDIR+"/hvaddcrate","w")
print('HVAddCrate %d,"127.0.0.1"'%cratenum,file=hvaddcrate)

# Write out the substitution file

f = open(SUBFILENAME, "w")
today = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S") #get the data
crname = "%s%d"%(CRNAMEPREFIX,cratenum)

#print the preamble
print('#',file=f)
print('# This file was generated by the command \"'+__file__+" "+" ".join(sys.argv[1:])+"' "+today, file=f)
print('#',file=f)

print('file "db/lecroycrate.db" {',file=f)
print('pattern',file=f)
print('  { Cr, CrName}',file=f)
print('  { "'+str(cratenum)+'", "'+crname+'"}',file=f)
print('}',file=f)

print('file "db/lecroychan.db" {',file=f)
print('pattern',file=f)
print('  { Cr, CrName, Sl, Ch, CScode,', end='',file=f)
print(', '.join([x for x in command_codes]),end='', file=f)
print(',',', '.join([x for x in alarm_limits])+"}", file=f)

for slot in slotlist:
    for chan in range(CHANS):
        cscode = "#C%d"%(256*slot + cratenum)
            
        values = ["%d"%cratenum, crname, "%.2d"%slot, "%.3d"%chan, cscode]
        values += ["S%d"%(command_codes[x]*256+chan) for x in command_codes]
        values += [str(alarm_limits[x]) for x in alarm_limits]
        rowstring = "\t{" + '"{}"'.format('", "'.join(values)) + "}"
        print(rowstring,file=f)

print('}',file=f)

f.close()
